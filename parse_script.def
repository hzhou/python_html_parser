include: python/parse.def

include: macros_javascript/parse_frame.def
include: macros_javascript/types.def
include: macros_javascript/operator.def
include: macros_javascript/statement.def
include: macros_javascript/reduce.def
include: macros_javascript/eval_expr.def

include: macros_javascript/debug.def

page: parse_script, basic_frame
    module: python

    s="""document.write("<h2>Table of Fibonacci Numbers</h2>");
    for(i=0,j=1, k=0, fib=0; i<50; i++, fib=j+k, j=k, k=fib){
        document.write("Fibonacci (" + i + ") = " + fib);
        document.write("<br>");
    }"""

    print s
    ast = parse_javascript(s)
    $(if:1)
        debug_ast(ast)

fncode:: parse_javascript(src, pos_begin=-1, pos_end=-1)
    $if pos_begin<0
        src_pos = 0
        src_len = len(src)
    $else
        src_pos = pos_begin
        src_len = pos_end

    $(set:skip_src_len)
    # $(set:debug=200)
    $call parse_frame

    # ---------------------------------------- 
    subcode: match
        #$print context=$cur_context, context_stack: $context_stack
        $if $(type:-1)=='boc'
            $call skip_space_wide
        $else
            $call skip_space_narrow

        $if match_end_of_statement()
            cur = (';', ';')
            break

        $if cur_context in codelist_context
            $call match_statement

        $call match_function

        #-- keyword data -----------
        &call if_match_break, true|false
            cur = (m.group(0), 'bool')
        &call if_match_break, null
            cur = (m.group(0), 'null')

        #-- string ------------
        &call if_match_break, \"(([^\\\"]|\\.)*)\"
            r_esc_extra = re.compile(r"\\([^0btnvfrxuX'\"\\])")
            s = r_esc_extra.sub(r'\1', m.group(0))
            s = eval(s)
            cur = (s, "string")
        &call if_match_break, '(([^\\']|\\.)*)'
            #--TODO: detect extra escapes e.g. \#
            r_double = re.compile('(?!\\)"')
            s = r.sub('\\"', m.group(1))
            s = eval('"'+s+'"')
            cur = (s, 'string')
        &call if_match_break, /([^\\]|\\.)+/[igm]*
            cur = (m.group(0), "regex")

        #-- numbers ------------
        &call if_match_break, r"0x[0-9a-f]+", re.I
            cur = (int(m.group(0), 16), 'int')
        &call if_match_break, r"0[0-7]*", re.I
            cur = (int(m.group(0), 8), 'int')
        &call if_match_break, (\d+)(\.\d+)?([eE][+-]?\d+)?
            $if m.group(2) or m.group(3)
                cur = (float(m.group(0)), 'float')
            $else
                cur = (int(m.group(1)), 'int')

        #-- operators -------------
        # ++, --
        $if_match \+\+|--
            op = m.group(0)
            $if $(type:-1) in atom_type
                t=stack.pop()
                stack.append: (t, op)
                continue
            $else
                cur = (op, op)

        # - 
        &call if_match_break, new|in|delete|typeof|void|instanceof
            op = m.group(0)
            cur = (op, op)

        $if cur_context=="object" and src[src_pos]==':'
            # assert stack[-1] is identifier or string
            src_pos+=1
            cur = (':', ':{')
            break
        # - 
        &call if_match_break, (==?=?|!==?|>>?>?=?|<<?=?|&&?|\|\|?)
            op = m.group(0)
            cur = (op, op)
        &call if_match_break, [+\-*/%^&|]=?
            op = m.group(0)
            cur = (op, op)
        &call if_match_break, [,]
            op = m.group(0)
            cur = (op, op)
        # - 
        &call if_match_break, [~!]
            op = m.group(0)
            cur = (op, op)

        #-- . ----
        $if_match .
            $if_match $(pat_identifier)
                t=stack.pop()
                stack.append: ([t, m.group(0)], "member")
                continue
            $else
                raise Exception(". not followed with identifier")

        #-- brackets ------------
        &call if_match_continue, [\[\(\{]
            #---- all opening brackets atom differentiates type
            #-    reduction happens at ')'
            op = m.group(0)
            $if $(type:-1) in atom_type
                $if op == '('
                    stack.append: ('fcall', '(')
                $elif op== '['
                    stack.append: ('index', '(')
                $else
                    $call error, "error opening bracket '"+op+"', forgot ';'?"
            $else
                $if op == '{'
                    $if $(type:-1)=='boc'
                        $call start_context, compound
                    $else
                        $call start_context, object
                        cur_item={}
                $elif op == '['
                    $call start_context, array
                $else
                    stack.append: ('(', '(')

        &call if_match_break, [\]\)\}]
            op = m.group(0)
            cur = (op, ')')
            $if $(type:-1)=='(' or $(type:-1)=="boc"
                stack.append(("", None))

        macros:
            pat_identifier: [_a-zA-Z\$]\w*

        #-- identifier -----------
        &call if_match_break, $(pat_identifier)
            cur = (m.group(0), 'identifier')
            $call skip_space_narrow
            &call if_match_single, :
                $call push_statement, (cur[0], "label")
                continue

    # ---------------------------------------- 
    subcode: process
        # $print process cur: $cur
        $if $(cur_type) in atom_type
            #-- atom ------------------
            $if $(type:-1) in atom_type
                print "cur: ", cur
                $call error, "two adjacent atoms"
        $else 
            #-- operator ---------------
            $if $(cur_type) in maybe_unary
                $if not $(type:-1) in atom_type
                    cur=(cur[0], "unary")
                    break

            $(set:cond) join, " and "
                len(stack)>2
                less_precedence($(cur_type), $(type:-2))
            $if $(cond)
                $call reduce_stack
                continue

        subcode: reduce_stack
            op = $(type:-2)
            # print "reduce_stack: op = ", stack[-2]
            $if op==':{'
                cur_item[stack[-3][0]]=stack[-1]
                stack[-3:]=[]
                $if $(cur_type)==','
                    cur=('', '')
                    break
            $elif op == ','
                $call reduce_list, "list"
            $elif op == 'unary'
                op = $(atom:-2)
                $call reduce_unary
            $elif op == '('
                type = $(atom:-2)
                $call reduce_bracket
            $elif op == 'boc'
                type = $(atom:-2)
                $call reduce_context
                cur = (cur_item, type)
                stack[-2:]=[]
                $call pop_context
                break
            $else
                $call reduce_binary

    # ---------------------------------------- 
    subcode: post_process
        $if $(cur_type) == ';'
            $call push_statement, stack.pop()
            continue
        $elif $(cur_type) == "compound"
            $call push_statement, $(cur_atom)
            continue

    subcode: pre_return
        $if len(stack)>1
            $call push_statement, stack.pop()
        return (cur_item, cur_context)


