include: python/parse.def

page: test, basic_frame
    module: python

    f = open('test.html')
    s = f.read()

    # print (s)

    page = parse_html(s)
    # print "root_node: ", type(root_node), "\n"
    $(if:1)
        debug_dom(page["dom"])

fncode: parse_html(src)
    style_list=[]
    
    tag_stack=[]
    cur_list=[]
    tag_stack.append: {'_name':'root', '_list':cur_list}

    &call parse_loop
        # print "src_pos = ", src_pos
        &call if_match_continue, <!--.*?-->
            #-- comment ----
        &call if_match_continue, r"<!DOCTYPE.*?>", re.I
            #-- doctype ----
        &call if_match_continue, [^<]+
            #-- text node ----
            cur_list.append: m.group(0)
        &call if_match_continue, <(\w+)(.*?)>
            #-- start tag ----
            s_name=m.group(1)
            s_attr=m.group(2)
            $call match_start_tag
        &call if_match_continue, </(\w+).*?>
            #-- end tag ----
            s_name=m.group(1)
            $call match_end_tag

    return {"dom":tag_stack[0], "style_list":style_list}

    # ------------------------------
    subcode: match_start_tag
        tag = {'_name':s_name}
        parse_attribute(tag, s_attr)

        cur_list.append: tag

        $if '/' in tag or re.match(r"area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr", s_name, re.I)
            #-- empty --
            pass
        $elif re.match(r"script|style|textarea|title", s_name, re.I)
            #-- raw text --
            $call scan_raw_text
            $if s_name.lower() == "style"
                $import parse_style
                parse_style.parse_style_sheet(style_list, $(raw_text))
        $else
            tag_stack.append: tag
            cur_list=[]
            tag['_list'] = cur_list

    subcode: match_end_tag
        $if s_name == tag_stack[-1]['_name']
            tag_stack.pop()
            cur_list=tag_stack[-1]['_list']
        $else
            #-- error --
            #-    drop missed tags or do nothing
            j=len(tag_stack)-2
            while j>0:
                if s_name == tag_stack[j]['_name']
                    while len(tag_stack)>=j
                        tag_stack.pop()
                    cur_list=tag_stack[-1]['_list']
                    break
                j-=1

    # ----------------------------
    subcode: scan_raw_text
        i_start=src_pos
        &call sub_loop
            &call if_match_continue, ([^<]|<[^/])+
                # -- include
            &call if_match_single, </(\w+).*?>
                $if m.group(1)==s_name
                    break
                $else
                    continue
            src_pos+=1
        i_end=src_pos
        $(export:raw_text=src[i_start:i_end])
        tag['_text'] = src[i_start:i_end]


#---------------------------------------- 
fncode: parse_attribute(tag, src)
    &call parse_loop
        &call if_match_continue, \s+
            #-- skip --
        &call if_match_continue, /
            #-- self closing --
            tag['/']=1
        &call if_match_continue, ([^\s'\"\\=<>`]+)
            #-- got a name --
            s_attr_name=m.group(1)
            #-- = --
            &call if_match_single, \s*=\s*
                $call parse_attr_value
            $else
                tag[s_attr_name]=1
    # -----
    subcode: parse_attr_value
        &call sub_loop
            &call if_match_break, \"((?:[^\\\"]+|\\.)*)\"
                tag[s_attr_name] = m.group(1)
            &call if_match_break, '((?:[^\\\']+|\\.)*)'
                tag[s_attr_name] = m.group(1)
            &call if_match_break, [^\s'\"=<>`]+
                tag[s_attr_name] = m.group(0)
            #-- error --
            i+=1
                    
#---------------------------------------- 
fncode: debug_dom(node)
    $def print_node(node, level)
        $if isinstance(node, str)
            print "    " * level, node
        $else
            print "    " * level, node['_name']
            $if "_list" in node
                $for t in node['_list']
                    print_node(t, level+1)

    print_node(node, 0)


